{"version":3,"sources":["webpack://dev-ryan-portfolio/./src/constants/contactIconToUrlMap.ts","webpack://dev-ryan-portfolio/./src/components/contactsPage/contactLinks.tsx","webpack://dev-ryan-portfolio/./src/pages/contact.tsx"],"names":["contactIconToUrlMap","Map","props","contactIcons","useStaticQuery","links","allFile","nodes","map","e","className","key","name","href","get","rel","target","publicURL","childImageSharp","G","image","getImage","alt","src","avatar","title"],"mappings":"gOAAaA,EAA2C,IAAIC,IAAI,CAC/D,CAAC,oBAAqB,sCACtB,CAAC,WAAY,gDACb,CAAC,QAAS,4BCiEX,EAjDsC,SAACC,GACtC,IAAMC,GAA6BC,oBAAe,cAgC5CC,EAAuBF,EAAaG,QAAQC,MAAMC,KAAI,SAACC,GAC5D,OACC,sBAAIC,UAAU,eAAeC,IAAKF,EAAEG,MACnC,qBACCF,UAAU,eACVG,KAAMb,EAAoBc,IAAIL,EAAEG,MAChCG,IAAI,sBACJC,OAAO,WArBVC,EAsBoBR,EAAEQ,WArBtBC,EAqBiCT,EAAES,iBAjBjC,gBAAC,EAAAC,EAAD,CACCC,OAAOC,OAASH,GAChBI,IAAKL,IAID,uBAAKM,IAAKN,EAAWK,IAAKL,OAZV,IACvBA,EACAC,KA0BD,OAAO,sBAAIR,UAAU,gBAAgBL,ICjBtC,EAjC0B,WACzB,IAAMmB,GAAiBpB,oBAAe,cAatC,OACC,gBAAC,IAAD,KACC,gBAAC,IAAD,CAAKqB,MAAM,YACX,uBAAKf,UAAU,qBACd,2BACC,gBAAC,EAAAS,EAAD,CACCC,OAAOC,OACNG,EAAOlB,QAAQC,MAAM,GAAGW,iBAEzBI,IAAI,mBAEL,sBAAIZ,UAAU,kBAAd,iBAED,gBAAC,EAAD","file":"component---src-pages-contact-tsx-0c91d5a3b986b31b139b.js","sourcesContent":["export const contactIconToUrlMap: Map<string, string> = new Map([\r\n\t['github-mark-white', 'https://github.com/RyanCallahan312'],\r\n\t['linkedin', 'https://www.linkedin.com/in/ryancallahan312/'],\r\n\t['gmail', 'mailto:Ryan@DevRyan.io'],\r\n]);\r\n","import * as React from 'react';\r\nimport '@styles/contactLinks.css';\r\nimport { useStaticQuery, graphql } from 'gatsby';\r\nimport { GatsbyImage, getImage, IGatsbyImageData } from 'gatsby-plugin-image';\r\nimport { contactIconToUrlMap } from '@constants/contactIconToUrlMap';\r\n\r\ninterface ContactIcons {\r\n\tallFile: {\r\n\t\tnodes: [\r\n\t\t\t{\r\n\t\t\t\tchildImageSharp?: IGatsbyImageData;\r\n\t\t\t\tpublicURL: string;\r\n\t\t\t\tname: string;\r\n\t\t\t},\r\n\t\t];\r\n\t};\r\n}\r\ninterface Props {}\r\n\r\nconst contactLinks: React.FC<Props> = (props: Props) => {\r\n\tconst contactIcons: ContactIcons = useStaticQuery(graphql`\r\n    {\r\n        allFile(\r\n            filter: {relativeDirectory: {eq: \"icons\"}, base: {in: [\"github-mark-white.svg\", \"gmail.svg\", \"linkedin.png\"]}}\r\n            sort: {fields: base}\r\n        ) {\r\n            nodes {\r\n                childImageSharp {\r\n                    gatsbyImageData(placeholder: BLURRED, formats: [AUTO, WEBP, AVIF])\r\n                }\r\n                publicURL\r\n                name\r\n            }\r\n        }\r\n    }\r\n    `);\r\n\r\n\tconst getContactImage = (\r\n\t\tpublicURL: string,\r\n\t\tchildImageSharp?: IGatsbyImageData,\r\n\t): JSX.Element => {\r\n\t\tif (childImageSharp) {\r\n\t\t\treturn (\r\n\t\t\t\t<GatsbyImage\r\n\t\t\t\t\timage={getImage(childImageSharp)}\r\n\t\t\t\t\talt={publicURL}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn <img src={publicURL} alt={publicURL} />;\r\n\t};\r\n\r\n\tconst links: JSX.Element[] = contactIcons.allFile.nodes.map((e) => {\r\n\t\treturn (\r\n\t\t\t<li className='contact-item' key={e.name}>\r\n\t\t\t\t<a\r\n\t\t\t\t\tclassName='contact-link'\r\n\t\t\t\t\thref={contactIconToUrlMap.get(e.name)}\r\n\t\t\t\t\trel='noopener noreferrer'\r\n\t\t\t\t\ttarget='_blank'>\r\n\t\t\t\t\t{getContactImage(e.publicURL, e.childImageSharp)}\r\n\t\t\t\t</a>\r\n\t\t\t</li>\r\n\t\t);\r\n\t});\r\n\treturn <ul className='contact-list'>{links}</ul>;\r\n};\r\n\r\nexport default contactLinks;\r\n","import * as React from 'react';\r\nimport { useStaticQuery, graphql } from 'gatsby';\r\nimport { GatsbyImage, getImage, IGatsbyImageData } from 'gatsby-plugin-image';\r\n\r\nimport Layout from '@components/common/defaultLayout';\r\nimport SEO from '@components/common/seo';\r\n\r\nimport '@styles/contact.css';\r\nimport ContactLinks from '@components/contactsPage/contactLinks';\r\n\r\ninterface Avatar {\r\n\tallFile: {\r\n\t\tnodes: [{ childImageSharp: IGatsbyImageData }];\r\n\t};\r\n}\r\nconst Contact: React.FC = () => {\r\n\tconst avatar: Avatar = useStaticQuery(graphql`\r\n    {\r\n      allFile(\r\n        filter: {relativeDirectory: {eq: \"avatar\"}, base: {eq: \"bitmojipfp.png\"}}\r\n      ) {\r\n        nodes {\r\n          childImageSharp {\r\n            gatsbyImageData(placeholder: BLURRED, formats: [AUTO, WEBP, AVIF])\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\treturn (\r\n\t\t<Layout>\r\n\t\t\t<SEO title='Contact' />\r\n\t\t\t<div className='contact-container'>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<GatsbyImage\r\n\t\t\t\t\t\timage={getImage(\r\n\t\t\t\t\t\t\tavatar.allFile.nodes[0].childImageSharp,\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\talt='bitmoji avatar'\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<h1 className='contact-header'>Say Hello ðŸ™Œ</h1>\r\n\t\t\t\t</div>\r\n\t\t\t\t<ContactLinks />\r\n\t\t\t</div>\r\n\t\t</Layout>\r\n\t);\r\n};\r\n\r\nexport default Contact;\r\n"],"sourceRoot":""}