{"version":3,"sources":["webpack://dev-ryan-portfolio/./src/constants/cardToTagMap.ts","webpack://dev-ryan-portfolio/./src/components/skillCard/skillCardRadial.tsx","webpack://dev-ryan-portfolio/./src/components/skillCard/skillCardCarosel.tsx","webpack://dev-ryan-portfolio/./src/pages/index.tsx"],"names":["cardToTagMap","props","cardPaths","React","selected","setSelected","filteredPaths","setFilteredPaths","handleClick","index","setTimeout","navigate","encodeURI","isLaptop","useMediaQuery","minDeviceWidth","tempFilteredPaths","offset","i","length","Math","floor","random","push","ellipse","x","ySquare","abs","sqrt","images","map","imagePath","y","key","slice","src","alt","width","className","style","left","bottom","onClick","arrow","useStaticQuery","handleCardClick","handleArrowClick","direction","smallScreen","minDeviceHeight","allFile","nodes","publicURL","node","isDesktopOrLaptop","title"],"mappings":"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","file":"component---src-pages-index-tsx-32928c7528bce48fe5b0.js","sourcesContent":["export const cardToTagMap: Array<string> = [\r\n\t'azure',\r\n\t'docker',\r\n\t'dotnet',\r\n\t'linux',\r\n\t'microservice',\r\n\t'node',\r\n\t'openapi',\r\n\t'plsql',\r\n\t'postgresql',\r\n\t'python',\r\n\t'react',\r\n\t'redux',\r\n\t'spring',\r\n];\r\n","import * as React from 'react';\r\nimport '@styles/skillCardRadial.css';\r\nimport { navigate } from 'gatsby';\r\nimport { cardToTagMap } from '@constants/cardToTagMap';\r\nimport { useMediaQuery } from 'react-responsive';\r\n\r\ninterface Props {\r\n\tcardPaths: Array<string>;\r\n}\r\n\r\nconst SkillCardRadial: React.FC<Props> = (props: Props) => {\r\n\tconst { cardPaths } = props;\r\n\r\n\tconst [selected, setSelected] = React.useState(-1);\r\n\tconst [filteredPaths, setFilteredPaths] = React.useState([]);\r\n\tconst handleClick = React.useCallback((index: number): void => {\r\n\t\tsetSelected(() => (selected == index ? -1 : index));\r\n\t\tsetTimeout(\r\n\t\t\t() => navigate(`/projects?tags=${encodeURI(cardToTagMap[index])}#search`),\r\n\t\t\t750,\r\n\t\t);\r\n\t}, []);\r\n\t\r\n\r\n\tconst isLaptop = useMediaQuery({ minDeviceWidth: 1441 });\r\n\r\n\tReact.useEffect(() => {\r\n\t\tlet tempFilteredPaths = [];\r\n\t\tlet offset: number = 0;\r\n\t\tfor (let i: number = 0; i < cardPaths.length; i += 4) {\r\n\t\t\toffset = Math.floor(Math.random() * 4);\r\n\t\t\ttempFilteredPaths.push(cardPaths[i + offset]);\r\n\t\t}\r\n\t\tsetFilteredPaths(tempFilteredPaths);\r\n\t}, []);\r\n\r\n\tconst ellipse = (x: number): number => {\r\n\t\tlet ySquare = 250000 - (x / 1.5) * (x / 1.5);\r\n\t\tySquare = Math.abs(ySquare);\r\n\t\treturn Math.sqrt(ySquare);\r\n\t};\r\n\r\n\tconst images: JSX.Element[] =\r\n\t\tfilteredPaths &&\r\n\t\tfilteredPaths.map((imagePath: string, i: number) => {\r\n\t\t\tlet x: number = 700 * ((2 * i) / 12 - 1);\r\n\t\t\tlet y: number;\r\n\t\t\tif(isLaptop){\r\n\t\t\t\ty= ellipse(x);\r\n\t\t\t}else{\r\n\t\t\t\ty = ellipse(x*.9) - 70;\r\n\t\t\t\tx=x*.8;\r\n\t\t\t}\r\n\t\t\treturn (\r\n\t\t\t\t<img\r\n\t\t\t\t\tkey={imagePath.slice(-15) + i}\r\n\t\t\t\t\tsrc={imagePath}\r\n\t\t\t\t\talt='Skill Card'\r\n\t\t\t\t\t\r\n\t\t\t\t\twidth={isLaptop ? 200 : 150}\r\n\t\t\t\t\tclassName={`skill-card ${\r\n\t\t\t\t\t\tselected == i && ' skill-card-selected'\r\n\t\t\t\t\t}`}\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tleft: `calc(45% + ${x}px)`,\r\n\t\t\t\t\t\tbottom: `calc( ${y - 250}px)`,\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tonClick={() => handleClick(i)}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t});\r\n\r\n\treturn <div className='skill-card-radial-container'>{images}</div>;\r\n};\r\n\r\nexport default SkillCardRadial;\r\n","import * as React from 'react';\r\nimport '@styles/skillCardCarosel.css';\r\nimport { navigate } from 'gatsby';\r\nimport { cardToTagMap } from '@constants/cardToTagMap';\r\nimport { useMediaQuery } from 'react-responsive';\r\nimport { useStaticQuery, graphql } from 'gatsby';\r\n\r\ninterface ArrowQuery {\r\n\tallFile: {\r\n\t\tnodes: [\r\n\t\t\t{\r\n\t\t\t\tpublicURL: string;\r\n\t\t\t},\r\n\t\t];\r\n\t};\r\n}\r\ninterface Props {\r\n\tcardPaths: Array<string>;\r\n}\r\n\r\nconst SkillCardCarosel: React.FC<Props> = (props: Props) => {\r\n\tconst arrow: ArrowQuery = useStaticQuery(graphql`\r\n\t{\r\n\t\tallFile(filter: {relativeDirectory: {eq: \"\"}, name: {eq: \"arrow\"} }) {\r\n\t\t\tnodes {\r\n\t\t\t\tpublicURL\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t`);\r\n\r\n\tconst { cardPaths } = props;\r\n\r\n\tconst [selected, setSelected] = React.useState(0);\r\n\tconst [filteredPaths, setFilteredPaths] = React.useState([]);\r\n\r\n\tconst handleCardClick = React.useCallback((index: number): void => {\r\n\t\tsetSelected(() => (selected == index ? -1 : index));\r\n\t\tnavigate(`/projects?tags=${encodeURI(cardToTagMap[index])}#search`);\r\n\t}, []);\r\n\r\n\tconst handleArrowClick: Function = (direction: number) => {\r\n\t\tif (selected === 0 && direction === -1) {\r\n\t\t\tsetSelected(filteredPaths.length-1);\r\n\t\t} else if (selected == filteredPaths.length-1 && direction == 1) {\r\n\t\t\tsetSelected(0);\r\n\t\t} else {\r\n\t\t\tsetSelected((selected) => selected + direction);\r\n\t\t}\r\n\t};\r\n\r\n\tReact.useEffect(() => {\r\n\t\tlet tempFilteredPaths = [];\r\n\t\tlet offset: number = 0;\r\n\t\tfor (let i: number = 0; i < cardPaths.length; i += 4) {\r\n\t\t\toffset = Math.floor(Math.random() * 4);\r\n\t\t\ttempFilteredPaths.push(cardPaths[i + offset]);\r\n\t\t}\r\n\t\tsetFilteredPaths(tempFilteredPaths);\r\n\t}, []);\r\n\r\n\tconst smallScreen = useMediaQuery({ minDeviceHeight: 700 });\r\n\r\n\treturn (\r\n\t\t<div className='skill-card-list-container'>\r\n\t\t\t<button className='noshow' onClick={() => handleArrowClick(-1)}>\r\n\t\t\t\t<img\r\n\t\t\t\t\tsrc={arrow.allFile.nodes[0].publicURL}\r\n\t\t\t\t\tclassName='arrow left'\r\n\t\t\t\t\talt='left arrow'\r\n\t\t\t\t/>\r\n\t\t\t</button>\r\n\t\t\t<img\r\n\t\t\t\tsrc={filteredPaths[selected]}\r\n\t\t\t\talt='Skill Card'\r\n\t\t\t\twidth={smallScreen ? 280 : 200}\r\n\t\t\t\tclassName={`skill-card-list`}\r\n\t\t\t\tonClick={() => handleCardClick(selected)}\r\n\t\t\t/>\r\n\t\t\t<button className='noshow' onClick={() => handleArrowClick(1)}>\r\n\t\t\t\t<img\r\n\t\t\t\t\tsrc={arrow.allFile.nodes[0].publicURL}\r\n\t\t\t\t\tclassName='right arrow'\r\n\t\t\t\t\talt='right arrow'\r\n\t\t\t\t/>\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SkillCardCarosel;\r\n","import * as React from 'react';\r\nimport { useStaticQuery, graphql } from 'gatsby';\r\nimport { useMediaQuery } from 'react-responsive';\r\n\r\nimport Layout from '@components/common/defaultLayout';\r\nimport SEO from '@components/common/seo';\r\nimport SkillCardRadial from '@components/skillCard/skillCardRadial';\r\nimport SkillCardCarosel from '@components/skillCard/skillCardCarosel';\r\nimport '@styles/index.css';\r\n\r\ninterface CardUrlQuery {\r\n\tallFile: {\r\n\t\tnodes: [\r\n\t\t\t{\r\n\t\t\t\tpublicURL: string;\r\n\t\t\t},\r\n\t\t];\r\n\t};\r\n}\r\n\r\nconst IndexPage: React.FC = () => {\r\n\tconst data: CardUrlQuery = useStaticQuery(graphql`\r\n\t{\r\n\t\tallFile(filter: {relativeDirectory: {eq: \"skillCards\"}}, sort: {fields: name}) {\r\n\t\t\tnodes {\r\n\t\t\t\tpublicURL\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t`);\r\n\r\n\tconst cardPaths = data.allFile.nodes.map((node) => node.publicURL);\r\n\r\n\tconst isDesktopOrLaptop = useMediaQuery({ minDeviceWidth: 1024 });\r\n\r\n\treturn (\r\n\t\t<Layout>\r\n\t\t\t<SEO title='Home' />\r\n\t\t\t<div className='headline-grid-container'>\r\n\t\t\t\t<div className='headline-text-container'>\r\n\t\t\t\t\t<h1 className='index-header'>ðŸ‘‹ Iâ€™m Ryan</h1>\r\n\t\t\t\t\t<h3 className='index-header'>a full stack web developer</h3>\r\n\t\t\t\t\t<h3 className='index-header'>\r\n\t\t\t\t\t\twith a lot of cards in my hand\r\n\t\t\t\t\t</h3>\r\n\t\t\t\t</div>\r\n\t\t\t\t{isDesktopOrLaptop ? (\r\n\t\t\t\t\t<SkillCardRadial cardPaths={cardPaths} />\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<SkillCardCarosel cardPaths={cardPaths} />\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t</Layout>\r\n\t);\r\n};\r\n\r\nexport default IndexPage;\r\n"],"sourceRoot":""}